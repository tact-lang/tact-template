---
description: Receiving TON Coins Contracts maintain a TON balance to pay for storage rent and transaction costs, with any excess remaining in the balance. Refunding Senders If a transaction fails, unused funds are refunded automatically, while successful transactions can manually return excess via self.reply().
globs: *.tact
---
Receiving TON Coins
===================

Every contract has a TON coin balance. This balance is used to pay ongoing rent for storage and should not run out otherwise the contract may be deleted. You can store extra coins in the balance for any purpose.

Every incoming message normally carries some TON coin value sent by the sender. This value is used to pay gas for handling this message. Unused excess will stay in the contract balance. If the value doesn't cover the gas cost, the transaction will revert.

You can query the contract balance with `myBalance()` - note that the value is in nano-tons (like cents, just with 9 decimals). The balance already contains the incoming message value.

**Info**: More detail about myBalance() can be found here: [myBalance()](mdc:https:/docs.tact-lang.org/language/ref/common#mybalance)

Refunding senders
-----------------

If the transaction reverts, unused excess value will be sent back to sender on the _bounced_ message.

You can also refund the excess if the transaction succeeds by sending it back using `self.reply()` in a response message. This is the best way to guarantee senders are only paying for the exact gas that their message consumed.

```tact
    import "@stdlib/deploy";
    
    contract ReceiveCoins with Deployable {
    
        val: Int as int64;
    
        init() {
            self.val = 0;
        }
    
        // receive empty messages, these are usually simple TON coin transfers to the contract
        receive() {
            dump("empty message received");
            // revert the transaction if balance is growing over 3 TON
            require(myBalance() <= ton("3"), "Balance getting too high");
        }
    
        receive("increment") {
            // print how much TON coin were sent with this message
            dump(context().value);
            self.val = self.val + 1;
        }
    
        receive("refunding increment") {
            // print how much TON coin were sent with this message
            dump(context().value);
            self.val = self.val + 1;
            // return all the unused excess TON coin value on the message back to the sender (with a textual string message)
            self.reply("increment refund".asComment());
        }
     
        get fun balance(): Int {
            return myBalance(); // in nano-tons (like cents, just with 9 decimals)
        }
    }
```