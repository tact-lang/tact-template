---
description: The Ownable Trait allows defining an owner role with exclusive privileges. The owner can execute restricted actions, such as upgrades, by calling self.requireOwner(). This is useful for contract control but reduces decentralization. Ownership transfer is not supported.
globs: *.tact
---
The Ownable Trait
=================

Tact allows you to add common boilerplate behaviors to your contract by using traits.

The Ownable trait allows the contract to set an `owner` role, which can have higher priviliges from everybody else.

For example, if your contract allows upgrades, it would make sense to limit upgrades to the owner only, otherwise anyone could break the contract.

Be aware that dapps are supposed to be _decentralized_ and an owner role is by definition [centralized](mdc:https:/defi.org/ton). If you're building a dapp, try to minimize reliance on Ownable.

Note that this trait doesn't allow the owner to transfer ownership to a different owner.

How to use Ownable
------------------

Define a state variable named `owner: Address` and call `self.requireOwner()` in priviliged receivers.

**Info**: The Ownable trait is defined in the [standard library](mdc:https:/github.com/tact-lang/tact/blob/main/stdlib/libs/ownable.tact)

```tact
    // this trait has to be imported
    import "@stdlib/ownable";
    import "@stdlib/deploy";
    
    // the Ownable trait can limit certain actions to the owner only
    contract Counter with Deployable, Ownable {
    
        owner: Address; // The Ownable trait requires you to add this exact state variable
        val: Int as uint32;
     
        init() {
            self.owner = sender(); // we can initialize owner to any value we want, the deployer in this case
            self.val = 0;
        }
     
        // this message is available to anyone
        receive("increment") {
            self.val = self.val + 1;
        }
    
        // this message in only available to the owner
        receive("double") {
            self.requireOwner();
            self.val = self.val * 2;
        }
     
        get fun value(): Int {
            return self.val;
        }
    
        // get fun owner(): Address is added automatically to query who the owner is
    }
```