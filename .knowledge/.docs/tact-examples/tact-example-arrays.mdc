---
description: Arrays in Tact are implemented using map<Int, Type> with an additional variable tracking the number of elements. Cyclic Storage The contract keeps the last MaxSize elements by overwriting the oldest entry. Usage Constraints Arrays should have a known upper limit; for large-scale storage, contract sharding is required.
globs: *.tact
---
Arrays
======

You can implement simple arrays in Tact by using the `map` type.

To create an array, define a map with an `Int` type as the key. This key will represent the index in the array. Additionally, include a variable to keep track of the number of items in the array.

The example contract records the last five timestamps when the `timer` message was received. These timestamps are stored in a cyclical array, implemented as a map.

Limit the Number of Items
-------------------------

Maps are designed to hold a limited number of items. Only use a map if you know the maximum number of items it will contain. It's also a good idea to [write a test](mdc:https:/github.com/tact-lang/tact-emulator) to populate the map with its maximum number of elements and observe how gas consumption behaves under stress.

If the number of items is unbounded and could potentially grow into the billions, you will need to architect your contract differently. We will discuss unbounded arrays later, under the topic of contract sharding.

```tact
    import "@stdlib/deploy";
    
    // this contract records the last 5 timestamps of when "timer" message was received
    contract Arrays with Deployable {
    
        const MaxSize: Int = 5;
        arr: map<Int, Int>; // this is our array implemented with a map
        arrLength: Int as uint8 = 0;
        arrStart: Int as uint8 = 0; // our array is cyclic
    
        init() {}
    
        // push an item to the end of the array
        fun arrPush(item: Int) {
            if (self.arrLength < self.MaxSize) {
                self.arr.set(self.arrLength, item);
                self.arrLength = self.arrLength + 1;
            } else {
                self.arr.set(self.arrStart, item);
                self.arrStart = (self.arrStart + 1) % self.MaxSize;
            }
        }
    
        // iterate over all items in the array and dump them
        fun arrPrint() {
            let i: Int = self.arrStart;
            repeat (self.arrLength) {
                dump(self.arr.get(i)!!); // !! tells the compiler this can't be null
                i = (i + 1) % self.MaxSize;
            }
        }
    
        // record the timestamp when each "timer" message is received
        receive("timer") {
            let timestamp: Int = now();
            self.arrPush(timestamp);
        }
    
        receive("dump") {
            self.arrPrint();
        }
    
        get fun length(): Int {
            return self.arrLength;
        }
    
        get fun map(): map<Int, Int> {
            return self.arr;
        }
    }
```