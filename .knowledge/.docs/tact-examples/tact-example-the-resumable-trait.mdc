---
description: The Resumable Trait extends Stoppable by allowing the owner to resume a stopped contract. It's useful for temporary pauses in staking or vaults, unlike Stoppable, which is permanent. Use OwnableTransferable for ownership transfers.
globs: *.tact
---
The Resumable Trait
===================

The Resumable trait is almost identical to the Stoppable trait that we covered in the previous example.

It adds one important feature which is the ability for the owner to resume a stopped contract.

The Stoppable trait by itself may be a little dangerous because the owner cannot change their mind. If you're not sure which trait to use, use this one.

This trait implicitly adds the Ownable and Stoppable traits. Note that the Ownable trait doesn't allow the owner to transfer ownership to a different owner. To allow changing ownership, also add the `OwnableTransferable` trait.

How to use Resumable
--------------------

Define state variables named `owner: Address` and `stopped: Bool` and call `self.requireNotStopped()` on actions that should be stopped.

**Info**: The OwnableTransferable trait is defined in the [standard library](mdc:https:/github.com/tact-lang/tact/blob/main/stdlib/libs/stoppable.tact)

```tact
    // this trait has to be imported
    import "@stdlib/stoppable";
    import "@stdlib/ownable";
    import "@stdlib/deploy";
    
    // the Resumable trait allows the owner to stop/resume the contract which can limit certain actions
    contract Counter with Deployable, Resumable {
    
        owner: Address; // The Resumable trait requires you to add this exact state variable
        stopped: Bool;  // The Resumable trait requires you to add this exact state variable
        val: Int as uint32;
     
        init() {
            self.owner = sender(); // we can initialize owner to any value we want, the deployer in this case
            self.stopped = false;
            self.val = 0;
        }
     
        // this message will only work as long as the contract is not stopped
        receive("increment") {
            self.requireNotStopped();
            self.val = self.val + 1;
        }
     
        get fun value(): Int {
            return self.val;
        }
    
        // receive("Resume") is added automatically to allow owner to resume the contract
        // receive("Stop") is added automatically to allow owner to stop the contract
        // get fun stopped(): Bool is added automatically to query if contract is stopped
        // get fun owner(): Address is added automatically to query who the owner is
    }
```