---
description: Decimal Point in Tact uses integers onlyâ€”no floating points. Nano-Tons represent TON coins, where 1.25 TON = 1250000000 nano-tons (9 decimals). Interest Calculation uses percent-mille (thousandths of a percent) to handle fractional rates without floats.
globs: *.tact
---
Decimal Point
=============

All numbers in Tact are integers. Floating point types are not used in smart contracts because they're [unpredictable](mdc:https:/learn.microsoft.com/en-us/cpp/build/why-floating-point-numbers-may-lose-precision).

Arithmetics with dollars, for example, requires 2 decimal places. How can we represent the number `1.25` if we can only work with integers? The answer is to work with _cents_. So `1.25` becomes `125`. We just remember that the two lowest digits are coming after the decimal point.

In the same way, working with TON coins has 9 decimal places instead of 2. So the amount 1.25 TON is actually the number `1250000000` - we call these _nano-tons_ instead of cents.

Calculating interest
--------------------

This example calculates the earned interest over a deposit of 500 TON coins. The yearly interest rate in the example is 3.25%.

Since we can't hold the number `3.25` we will use thousandth of a percent as unit ([percent-mille](mdc:https:/en.wikipedia.org/wiki/Per_cent_mille)). So 3.25% becomes `3250` (3.25 \* 1000).

On withdraw, to calculate earned interest, we multiply the amount by the fraction of a year that passed (duration in seconds divided by total seconds in a year) and then by the interest rate divided by 100,000 (100% in percent-mille, meaning 100 \* 1000).

**Info**: Notice that total is returned in nano-tons.

```tact
    import "@stdlib/deploy";
    
    message Deposit {
        amount: Int as coins; // nano-tons
    }
    
    message Withdraw {
        amount: Int as coins; // nano-tons
    }
    
    const SecondsPerYear: Int = 365 * 24 * 60 * 60;
    
    contract Interest with Deployable {
     
        interestPercent: Int as int32;
        depositTime: Int as uint32 = 0;  // seconds since the epoch
        depositAmount: Int as coins = 0; // nano-tons
        totalEarned: Int as coins = 0;   // nano-tons
    
        init() {
            self.interestPercent = 3250; // 3.25% yearly interest rate in percent-mille
        }
    
        receive(msg: Deposit) {
            require(self.depositAmount == 0, "No multiple deposits");
            self.depositTime = now();
            self.depositAmount = msg.amount;
        }
    
        receive(msg: Withdraw) {
            require(msg.amount >= self.depositAmount, "Cannot withdraw more than deposit");
            self.depositAmount = self.depositAmount - msg.amount;
            let durationSeconds: Int = now() - self.depositTime;
            let earned: Int = msg.amount * durationSeconds * self.interestPercent / SecondsPerYear / 100000;
            dump(earned);
            self.totalEarned = self.totalEarned + earned;
        }
    
        get fun total(): Int {
            return self.totalEarned; // in nano-tons
        }
    }
```