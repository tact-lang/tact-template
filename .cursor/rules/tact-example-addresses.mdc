---
description: This describes Addresses in Tact, explaining that they are a primitive type representing smart contract identities on the TON blockchain. Addresses include a workchain ID (0 for users, -1 for validators) and an account ID. Different representations (bounceable/non-bounceable) have no effect inside contracts. Storage cost is 264-bit per address, making it relatively expensive in persistent state.
globs: *.tact
---
Addresses
=========

`Address` is another primitive data type. It represents standard addresses on the TON blockchain. Every smart contract on TON is identifiable by its address. Think of this as a unique id.

TON is divided into multiple chains called _workchains_. This allows to balance the load more effectively. One of the internal fields of the address is the workchain id:

*   `0` - The standard workchain, for regular users. Your contracts will be here.
    
*   `-1` - The masterchain, usually for validators. Gas on this chain is significantly more expensive, but you'll probably never use it.
    

There are multiple ways on TON to [represent](mdc:https:/docs.ton.org/learn/overviews/addresses#bounceable-vs-non-bounceable-addresses) the same address. Notice in the contract that the bouncable and non-bouncable representations of the same address actually generate the exact same value. Inside the contract, it doesn't matter which representation you use.

State costs
-----------

Most addresses take 264-bit to store (8-bit for the workchain id and 256-bit for the account id). **This means that storing 1000 addresses [costs](mdc:https:/ton.org/docs/develop/smart-contracts/fees#how-to-calculate-fees) about 0.189 TON per year.**

```tact
    import "@stdlib/deploy";
    
    contract Addresses with Deployable {
    
        // contract persistent state variables
        // we have three representations of the same address
        a1: Address = address("EQCD39VS5jcptHL8vMjEXrzGaRcCVYto7HUn4bpAOg8xqB2N"); // bouncable (same foundation wallet)
        a2: Address = address("UQCD39VS5jcptHL8vMjEXrzGaRcCVYto7HUn4bpAOg8xqEBI"); // non-bounceable (same foundation wallet)
        a3: Address;
    
        a4: Address;
        a5: Address;
        a6: Address;
    
        init() {
            // this is the third representation of the same address
            self.a3 = newAddress(0, 0x83dfd552e63729b472fcbcc8c45ebcc6691702558b68ec7527e1ba403a0f31a8); // raw (same foundation wallet)
            
            // here are a few other important addresses
            self.a4 = newAddress(0, 0); // the zero address (nobody)
            self.a5 = myAddress();      // address of this contract
            self.a6 = sender();         // address of the deployer (the sender during init())
        }
    
        receive("show all") {
            /// addresses cannot currently be dumped
            /// TODO: https://github.com/tact-lang/tact/issues/16
            /// dump(self.a1);
        }
    
        receive("show ops") {
            // temporary variable
            let a: Address = address("EQCD39VS5jcptHL8vMjEXrzGaRcCVYto7HUn4bpAOg8xqB2N"); // bouncable (same foundation wallet)
    
            dump(a == self.a1);
            dump(a == self.a2);
            dump(a == self.a3);
            
            dump(a == self.a4);
            dump(a != self.a5);
        }
    
        get fun result(): Address {
            return self.a1;
        }
    }
```